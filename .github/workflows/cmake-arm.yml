name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-20.04
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.1.0
    - uses: uraimo/run-on-arch-action@v2.0.5
      name: Build
      id: runcmd
      with:
        arch: armv7
        distro: ubuntu20.04

        # Not required, but speeds up builds by storing container images in
        # a GitHub package registry.
        githubToken: ${{ github.token }}
        
        setup: cmake -E make_directory ${{github.workspace}}/build
        
        install: |
                apt-get update -q -y
                apt-get install -q -y git cmake build-essential qt5-default qtbase5-dev cmake devscripts qtbase5-private-dev debhelper uuid-dev libqt5xmlpatterns5-dev dh-make libqt5serialport5-dev         
        
        # Set an output parameter `uname` for use in subsequent steps
        run: |
           uname -a
           echo ::set-output name=uname::$(uname -a)    
           git clone https://github.com/qt/qtmqtt
           cd qtmqtt
           QT_VERSION=$(qmake --version | sed -n  's/.*version\s*\([0-9]*\.[0-9]*\.[0-9]*\)\s*.*/\1/p')
           git checkout v$QT_VERSION
           cd .. && mv qtmqtt "qtmqtt-$QT_VERSION"; cd qtmqtt-$QT_VERSION
           qmake
           dh_make -s -c gpl -e none@none.de --createorig -y
           dpkg-buildpackage -b --no-sign
           cd ..
           git clone https://github.com/dailab/libsml
           cd libsml
           sed -i 's/.*\s-C\stest$//g' Makefile
           sed -i 's/.*\s-C\sexamples$//g' Makefile
           dpkg-buildpackage -b --no-sign
           cd ..
           git clone https://github.com/rscada/libmbus;
           cd libmbus;
           ./build-deb.sh;
           cd ..
           sudo dpkg -i *.deb
           cd build
           cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
           cpack
           mv *.deb ..
           ctest -C $BUILD_TYPE

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: Files
        path: |
          ${{github.workspace}}/*.deb
        #retention-days: 365
