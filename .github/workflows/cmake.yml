name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-22.04
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
#    - name: Install Qt
#      uses: jurplel/install-qt-action@v2

    - name: Prepare Environment
      shell: bash
      working-directory: ${{github.workspace}}
      run: sudo apt install -y git cmake build-essential qtbase5-dev devscripts qtbase5-private-dev debhelper uuid-dev libqt5xmlpatterns5-dev dh-make libqt5serialport5-dev dh-exec
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Build QtMqtt
      shell: bash
      working-directory: ${{github.workspace}}
      run: git clone https://github.com/qt/qtmqtt;
           cd qtmqtt;
           QT_VERSION=$(qmake --version | sed -n  's/.*version\s*\([0-9]*\.[0-9]*\.[0-9]*\)\s*.*/\1/p');
           git checkout v$QT_VERSION;
           cd .. && mv qtmqtt "qtmqtt-$QT_VERSION"; cd qtmqtt-$QT_VERSION;
           qmake;
           dh_make -s -c gpl -e none@none.de --createorig -y;
           dpkg-buildpackage -b --no-sign;
           sudo dpkg -i ../*.deb
           #make;
           #sudo make install

    - name: Build LibSml
      shell: bash
      working-directory: ${{github.workspace}}
      run: git clone https://github.com/volkszaehler/libsml;
           cd libsml;
           sed -i 's/.*\s-C\stest$//g' Makefile;
           sed -i 's/.*\s-C\sexamples$//g' Makefile;
           dpkg-buildpackage -b --no-sign;
           sudo dpkg -i ../*.deb
    - name: Build LibMBus
      shell: bash
      working-directory: ${{github.workspace}}
      run: git clone https://github.com/rscada/libmbus;
           cd libmbus;
           ./build-deb.sh;
           sudo dpkg -i ../*.deb

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Package
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cpack

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: Files
        path: |
          ${{github.workspace}}/build/*.deb
          ${{github.workspace}}/*.deb
        #retention-days: 365
